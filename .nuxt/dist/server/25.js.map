{"version":3,"file":"25.js","sources":["webpack:///./components/editor/plugin/image/index.scss","webpack:///./components/editor/plugin/image/ui.js","webpack:///./components/editor/plugin/image/tunes.js","webpack:///./components/editor/plugin/image/uploader.js","webpack:///./components/editor/plugin/image/index.js"],"sourcesContent":["// Exports\nmodule.exports = {};\n","/**\n * Class for working with UI:\n *  - rendering base structure\n *  - show/hide preview\n *  - apply tune view\n */\nexport default class Ui {\n  /**\n   * @param {object} api - Editor.js API\n   * @param {ImageConfig} config - user config\n   * @param {function} onSelectFile - callback for clicks on Select file buttor\n   */\n  constructor({ api, config, onSelectFile }) {\n    this.api = api\n    this.config = config\n    this.onSelectFile = onSelectFile\n    this.nodes = {\n      wrapper: make('div', [this.CSS.baseClass, this.CSS.wrapper]),\n      imageContainer: make('div', [this.CSS.imageContainer]),\n      fileButton: this.createFileButton(),\n      imageEl: undefined,\n      imagePreloader: make('div', this.CSS.imagePreloader),\n      caption: make('div', [this.CSS.input, this.CSS.caption], {\n        contentEditable: true\n      })\n    }\n\n    /**\n     * Create base structure\n     *  <wrapper>\n     *    <image-container>\n     *      <image-preloader />\n     *    </image-container>\n     *    <caption />\n     *    <select-file-button />\n     *  </wrapper>\n     */\n    this.nodes.caption.dataset.placeholder = this.config.captionPlaceholder\n    this.nodes.imageContainer.appendChild(this.nodes.imagePreloader)\n    this.nodes.wrapper.appendChild(this.nodes.imageContainer)\n    this.nodes.wrapper.appendChild(this.nodes.caption)\n    this.nodes.wrapper.appendChild(this.nodes.fileButton)\n  }\n\n  /**\n   * CSS classes\n   * @constructor\n   */\n  get CSS() {\n    return {\n      baseClass: this.api.styles.block,\n      loading: this.api.styles.loader,\n      input: this.api.styles.input,\n      button: this.api.styles.button,\n\n      /**\n       * Tool's classes\n       */\n      wrapper: 'image-tool',\n      imageContainer: 'image-tool__image',\n      imagePreloader: 'image-tool__image-preloader',\n      imageEl: 'image-tool__image-picture',\n      caption: 'image-tool__caption'\n    }\n  }\n\n  /**\n   * Ui statuses:\n   * - empty\n   * - uploading\n   * - filled\n   * @return {{EMPTY: string, UPLOADING: string, FILLED: string}}\n   */\n  static get status() {\n    return {\n      EMPTY: 'empty',\n      UPLOADING: 'loading',\n      FILLED: 'filled'\n    }\n  }\n\n  /**\n   * @param {ImageToolData} toolData\n   * @return {HTMLDivElement}\n   */\n  render(toolData) {\n    if (!toolData.file || Object.keys(toolData.file).length === 0) {\n      this.toggleStatus(Ui.status.EMPTY)\n    } else {\n      this.toggleStatus(Ui.status.UPLOADING)\n    }\n\n    return this.nodes.wrapper\n  }\n\n  /**\n   * Creates upload-file button\n   * @return {Element}\n   */\n  createFileButton() {\n    const button = make('div', [this.CSS.button])\n\n    button.innerHTML =\n      this.config.buttonContent ||\n      `${\n        '<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\\n' +\n        '    <path d=\"M3.15 13.628A7.749 7.749 0 0 0 10 17.75a7.74 7.74 0 0 0 6.305-3.242l-2.387-2.127-2.765 2.244-4.389-4.496-3.614 3.5zm-.787-2.303l4.446-4.371 4.52 4.63 2.534-2.057 3.533 2.797c.23-.734.354-1.514.354-2.324a7.75 7.75 0 1 0-15.387 1.325zM10 20C4.477 20 0 15.523 0 10S4.477 0 10 0s10 4.477 10 10-4.477 10-10 10z\"/>\\n' +\n        '</svg>'\n      } 选择一张图片`\n\n    button.addEventListener('click', () => {\n      this.onSelectFile()\n    })\n\n    return button\n  }\n\n  /**\n   * Shows uploading preloader\n   * @param {string} src - preview source\n   */\n  showPreloader(src) {\n    this.nodes.imagePreloader.style.backgroundImage = `url(${src})`\n\n    this.toggleStatus(Ui.status.UPLOADING)\n  }\n\n  /**\n   * Hide uploading preloader\n   */\n  hidePreloader() {\n    this.nodes.imagePreloader.style.backgroundImage = ''\n    this.toggleStatus(Ui.status.EMPTY)\n  }\n\n  /**\n   * Shows an image\n   * @param {string} url\n   */\n  fillImage(url) {\n    /**\n     * Check for a source extension to compose element correctly: video tag for mp4, img — for others\n     */\n    const tag = /\\.mp4$/.test(url) ? 'VIDEO' : 'IMG'\n\n    const attributes = {\n      src: url\n    }\n\n    /**\n     * We use eventName variable because IMG and VIDEO tags have different event to be called on source load\n     * - IMG: load\n     * - VIDEO: loadeddata\n     * @type {string}\n     */\n    let eventName = 'load'\n\n    /**\n     * Update attributes and eventName if source is a mp4 video\n     */\n    if (tag === 'VIDEO') {\n      /**\n       * Add attributes for playing muted mp4 as a gif\n       * @type {boolean}\n       */\n      attributes.autoplay = true\n      attributes.loop = true\n      attributes.muted = true\n      attributes.playsinline = true\n\n      /**\n       * Change event to be listened\n       * @type {string}\n       */\n      eventName = 'loadeddata'\n    }\n\n    /**\n     * Compose tag with defined attributes\n     * @type {Element}\n     */\n    this.nodes.imageEl = make(tag, this.CSS.imageEl, attributes)\n\n    /**\n     * Add load event listener\n     */\n    this.nodes.imageEl.addEventListener(eventName, () => {\n      this.toggleStatus(Ui.status.FILLED)\n\n      /**\n       * Preloader does not exists on first rendering with presaved data\n       */\n      if (this.nodes.imagePreloader) {\n        this.nodes.imagePreloader.style.backgroundImage = ''\n      }\n    })\n\n    this.nodes.imageContainer.appendChild(this.nodes.imageEl)\n  }\n\n  /**\n   * Shows caption input\n   * @param {string} text - caption text\n   */\n  fillCaption(text) {\n    if (this.nodes.caption) {\n      this.nodes.caption.innerHTML = text\n    }\n  }\n\n  /**\n   * Changes UI status\n   * @param {string} status - see {@link Ui.status} constants\n   */\n  toggleStatus(status) {\n    for (const statusType in Ui.status) {\n      // eslint-disable-next-line\n      if (Ui.status.hasOwnProperty(statusType)) {\n        this.nodes.wrapper.classList.toggle(`${this.CSS.wrapper}--${Ui.status[statusType]}`, status === Ui.status[statusType])\n      }\n    }\n  }\n\n  /**\n   * Apply visual representation of activated tune\n   * @param {string} tuneName - one of available tunes {@link Tunes.tunes}\n   * @param {boolean} status - true for enable, false for disable\n   */\n  applyTune(tuneName, status) {\n    this.nodes.wrapper.classList.toggle(`${this.CSS.wrapper}--${tuneName}`, status)\n  }\n}\n\n/**\n * Helper for making Elements with attributes\n *\n * @param  {string} tagName           - new Element tag name\n * @param  {array|string} classNames  - list or name of CSS class\n * @param  {Object} attributes        - any attributes\n * @return {Element}\n */\nexport const make = function make(tagName, classNames = null, attributes = {}) {\n  const el = document.createElement(tagName)\n\n  if (Array.isArray(classNames)) {\n    el.classList.add(...classNames)\n  } else if (classNames) {\n    el.classList.add(classNames)\n  }\n\n  for (const attrName in attributes) {\n    el[attrName] = attributes[attrName]\n  }\n\n  return el\n}\n","import { make } from './ui'\n\n/**\n * Working with Block Tunes\n */\nexport default class Tunes {\n  /**\n   * @param {object} api - Editor API\n   * @param {function} onChange - tune toggling callback\n   */\n  constructor({ api, onChange }) {\n    this.api = api\n    this.onChange = onChange\n    this.buttons = []\n  }\n\n  /**\n   * Available Image tunes\n   */\n  static get tunes() {\n    return [\n      {\n        name: 'withBorder',\n        icon:\n          '<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.8 10.592v2.043h2.35v2.138H15.8v2.232h-2.25v-2.232h-2.4v-2.138h2.4v-2.28h2.25v.237h1.15-1.15zM1.9 8.455v-3.42c0-1.154.985-2.09 2.2-2.09h4.2v2.137H4.15v3.373H1.9zm0 2.137h2.25v3.325H8.3v2.138H4.1c-1.215 0-2.2-.936-2.2-2.09v-3.373zm15.05-2.137H14.7V5.082h-4.15V2.945h4.2c1.215 0 2.2.936 2.2 2.09v3.42z\"/></svg>',\n        title: 'With border'\n      },\n      {\n        name: 'stretched',\n        icon:\n          '<svg width=\"17\" height=\"10\" viewBox=\"0 0 17 10\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.568 5.925H4.056l1.703 1.703a1.125 1.125 0 0 1-1.59 1.591L.962 6.014A1.069 1.069 0 0 1 .588 4.26L4.38.469a1.069 1.069 0 0 1 1.512 1.511L4.084 3.787h9.606l-1.85-1.85a1.069 1.069 0 1 1 1.512-1.51l3.792 3.791a1.069 1.069 0 0 1-.475 1.788L13.514 9.16a1.125 1.125 0 0 1-1.59-1.591l1.644-1.644z\"/></svg>',\n        title: 'Stretch image'\n      },\n      {\n        name: 'withBackground',\n        icon:\n          '<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.043 8.265l3.183-3.183h-2.924L4.75 10.636v2.923l4.15-4.15v2.351l-2.158 2.159H8.9v2.137H4.7c-1.215 0-2.2-.936-2.2-2.09v-8.93c0-1.154.985-2.09 2.2-2.09h10.663l.033-.033.034.034c1.178.04 2.12.96 2.12 2.089v3.23H15.3V5.359l-2.906 2.906h-2.35zM7.951 5.082H4.75v3.201l3.201-3.2zm5.099 7.078v3.04h4.15v-3.04h-4.15zm-1.1-2.137h6.35c.635 0 1.15.489 1.15 1.092v5.13c0 .603-.515 1.092-1.15 1.092h-6.35c-.635 0-1.15-.489-1.15-1.092v-5.13c0-.603.515-1.092 1.15-1.092z\"/></svg>',\n        title: 'With background'\n      }\n    ]\n  }\n\n  /**\n   * Styles\n   * @return {{wrapper: string, buttonBase: *, button: string, buttonActive: *}}\n   */\n  get CSS() {\n    return {\n      wrapper: '',\n      buttonBase: this.api.styles.settingsButton,\n      button: 'image-tool__tune',\n      buttonActive: this.api.styles.settingsButtonActive\n    }\n  }\n\n  /**\n   * Makes buttons with tunes: add background, add border, stretch image\n   * @param {ImageToolData} toolData\n   * @return {Element}\n   */\n  render(toolData) {\n    const wrapper = make('div', this.CSS.wrapper)\n\n    this.buttons = []\n\n    Tunes.tunes.forEach((tune) => {\n      const el = make('div', [this.CSS.buttonBase, this.CSS.button], {\n        innerHTML: tune.icon,\n        title: tune.title\n      })\n\n      el.addEventListener('click', () => {\n        this.tuneClicked(tune.name)\n      })\n\n      el.dataset.tune = tune.name\n      el.classList.toggle(this.CSS.buttonActive, toolData[tune.name])\n\n      this.buttons.push(el)\n\n      wrapper.appendChild(el)\n    })\n\n    return wrapper\n  }\n\n  /**\n   * Clicks to one of the tunes\n   * @param {string} tuneName - clicked tune name\n   */\n  tuneClicked(tuneName) {\n    const button = this.buttons.find(el => el.dataset.tune === tuneName)\n\n    button.classList.toggle(this.CSS.buttonActive, !button.classList.contains(this.CSS.buttonActive))\n\n    this.onChange(tuneName)\n  }\n}\n","import ajax from '@codexteam/ajax'\n\n/**\n * Module for file uploading. Handle 3 scenarios:\n *  1. Select file from device and upload\n *  2. Upload by pasting URL\n *  3. Upload by pasting file from Clipboard or by Drag'n'Drop\n */\nexport default class Uploader {\n  /**\n   * @param {ImageConfig} config\n   * @param {function} onUpload - one callback for all uploading (file, url, d-n-d, pasting)\n   * @param {function} onError - callback for uploading errors\n   */\n  constructor({ config, onUpload, onError }) {\n    this.config = config\n    this.onUpload = onUpload\n    this.onError = onError\n  }\n\n  /**\n   * Handle clicks on the upload file button\n   * @fires ajax.transport()\n   * @param {function} onPreview - callback fired when preview is ready\n   */\n  uploadSelectedFile({ onPreview }) {\n    const preparePreview = function(file) {\n      const reader = new FileReader()\n\n      reader.readAsDataURL(file)\n      reader.onload = (e) => {\n        onPreview(e.target.result)\n      }\n    }\n\n    /**\n     * Custom uploading\n     * or default uploading\n     */\n    let upload\n\n    // custom uploading\n    if (this.config.uploader && typeof this.config.uploader.uploadByFile === 'function') {\n      upload = ajax.selectFiles().then((files) => {\n        preparePreview(files[0])\n\n        const customUpload = this.config.uploader.uploadByFile(files[0])\n\n        if (!isPromise(customUpload)) {\n          // eslint-disable-next-line\n          console.warn('Custom uploader method uploadByFile should return a Promise')\n        }\n\n        return customUpload\n      })\n\n      // default uploading\n    } else {\n      upload = ajax\n        .transport({\n          url: this.config.endpoints.byFile,\n          data: this.config.additionalRequestData,\n          accept: this.config.types,\n          headers: this.config.additionalRequestHeaders,\n          beforeSend: (files) => {\n            preparePreview(files[0])\n          },\n          fieldName: this.config.field\n        })\n        .then(response => response.body)\n    }\n\n    upload\n      .then((response) => {\n        this.onUpload(response)\n      })\n      .catch((error) => {\n        this.onError(error)\n      })\n  }\n\n  /**\n   * Handle clicks on the upload file button\n   * @fires ajax.post()\n   * @param {string} url - image source url\n   */\n  uploadByUrl(url) {\n    let upload\n\n    /**\n     * Custom uploading\n     */\n    if (this.config.uploader && typeof this.config.uploader.uploadByUrl === 'function') {\n      upload = this.config.uploader.uploadByUrl(url)\n\n      if (!isPromise(upload)) {\n        // eslint-disable-next-line\n        console.warn('Custom uploader method uploadByUrl should return a Promise')\n      }\n    } else {\n      /**\n       * Default uploading\n       */\n      upload = ajax\n        .post({\n          url: this.config.endpoints.byUrl,\n          data: Object.assign(\n            {\n              url\n            },\n            this.config.additionalRequestData\n          ),\n          type: ajax.contentType.JSON,\n          headers: this.config.additionalRequestHeaders\n        })\n        .then(response => response.body)\n    }\n\n    upload\n      .then((response) => {\n        this.onUpload(response)\n      })\n      .catch((error) => {\n        this.onError(error)\n      })\n  }\n\n  /**\n   * Handle clicks on the upload file button\n   * @fires ajax.post()\n   * @param {File} file - file pasted by drag-n-drop\n   * @param {function} onPreview - file pasted by drag-n-drop\n   */\n  uploadByFile(file, { onPreview }) {\n    /**\n     * Load file for preview\n     * @type {FileReader}\n     */\n    const reader = new FileReader()\n\n    reader.readAsDataURL(file)\n    reader.onload = (e) => {\n      onPreview(e.target.result)\n    }\n\n    let upload\n\n    /**\n     * Custom uploading\n     */\n    if (this.config.uploader && typeof this.config.uploader.uploadByFile === 'function') {\n      upload = this.config.uploader.uploadByFile(file)\n\n      if (!isPromise(upload)) {\n        // eslint-disable-next-line\n        console.warn('Custom uploader method uploadByFile should return a Promise')\n      }\n    } else {\n      /**\n       * Default uploading\n       */\n      const formData = new FormData()\n\n      formData.append(this.config.field, file)\n\n      if (this.config.additionalRequestData && Object.keys(this.config.additionalRequestData).length) {\n        Object.entries(this.config.additionalRequestData).forEach(([name, value]) => {\n          formData.append(name, value)\n        })\n      }\n\n      upload = ajax\n        .post({\n          url: this.config.endpoints.byFile,\n          data: formData,\n          type: ajax.contentType.JSON,\n          headers: this.config.additionalRequestHeaders\n        })\n        .then(response => response.body)\n    }\n\n    upload\n      .then((response) => {\n        this.onUpload(response)\n      })\n      .catch((error) => {\n        this.onError(error)\n      })\n  }\n}\n\n/**\n * Check if passed object is a Promise\n * @param  {*}  object - object to check\n * @return {Boolean}\n */\nfunction isPromise(object) {\n  return Promise.resolve(object) === object\n}\n","/* eslint-disable */\n/**\n * Image Tool for the Editor.js\n * @author CodeX <team@ifmo.su>\n * @license MIT\n * @see {@link https://github.com/editor-js/image}\n *\n * To developers.\n * To simplify Tool structure, we split it to 4 parts:\n *  1) index.js — main Tool's interface, public API and methods for working with data\n *  2) uploader.js — module that has methods for sending files via AJAX: from device, by URL or File pasting\n *  3) ui.js — module for UI manipulations: render, showing preloader, etc\n *  4) tunes.js — working with Block Tunes: render buttons, handle clicks\n *\n * For debug purposes there is a testing server\n * that can save uploaded files and return a Response {@link UploadResponseFormat}\n *\n *       $ node dev/server.js\n *\n * It will expose 8008 port, so you can pass http://localhost:8008 with the Tools config:\n *\n * image: {\n *   class: ImageTool,\n *   config: {\n *     endpoints: {\n *       byFile: 'http://localhost:8008/uploadFile',\n *       byUrl: 'http://localhost:8008/fetchUrl',\n *     }\n *   },\n * },\n */\n\n/**\n * @typedef {object} ImageToolData\n * @description Image Tool's input and output data format\n * @property {string} caption — image caption\n * @property {boolean} withBorder - should image be rendered with border\n * @property {boolean} withBackground - should image be rendered with background\n * @property {boolean} stretched - should image be stretched to full width of container\n * @property {object} file — Image file data returned from backend\n * @property {string} file.url — image URL\n */\n\n// eslint-disable-next-line\nimport './index.scss';\nimport Ui from './ui'\nimport Tunes from './tunes'\nimport Uploader from './uploader'\n\n/**\n * @typedef {object} ImageConfig\n * @description Config supported by Tool\n * @property {object} endpoints - upload endpoints\n * @property {string} endpoints.byFile - upload by file\n * @property {string} endpoints.byUrl - upload by URL\n * @property {string} field - field name for uploaded image\n * @property {string} types - available mime-types\n * @property {string} captionPlaceholder - placeholder for Caption field\n * @property {object} additionalRequestData - any data to send with requests\n * @property {object} additionalRequestHeaders - allows to pass custom headers with Request\n * @property {string} buttonContent - overrides for Select File button\n * @property {object} [uploader] - optional custom uploader\n * @property {function(File): Promise.<UploadResponseFormat>} [uploader.uploadByFile] - method that upload image by File\n * @property {function(string): Promise.<UploadResponseFormat>} [uploader.uploadByUrl] - method that upload image by URL\n */\n\n/**\n * @typedef {object} UploadResponseFormat\n * @description This format expected from backend on file uploading\n * @property {number} success - 1 for successful uploading, 0 for failure\n * @property {object} file - Object with file data.\n *                           'url' is required,\n *                           also can contain any additional data that will be saved and passed back\n * @property {string} file.url - [Required] image source URL\n */\nexport default class ImageTool {\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @return {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon:\n        '<svg width=\"17\" height=\"15\" viewBox=\"0 0 336 276\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M291 150.242V79c0-18.778-15.222-34-34-34H79c-18.778 0-34 15.222-34 34v42.264l67.179-44.192 80.398 71.614 56.686-29.14L291 150.242zm-.345 51.622l-42.3-30.246-56.3 29.884-80.773-66.925L45 174.187V197c0 18.778 15.222 34 34 34h178c17.126 0 31.295-12.663 33.655-29.136zM79 0h178c43.63 0 79 35.37 79 79v118c0 43.63-35.37 79-79 79H79c-43.63 0-79-35.37-79-79V79C0 35.37 35.37 0 79 0z\"/></svg>',\n      title: '图片'\n    }\n  }\n\n  /**\n   * @param {ImageToolData} data - previously saved data\n   * @param {ImageConfig} config - user config for Tool\n   * @param {object} api - Editor.js API\n   */\n  constructor({ data, config, api }) {\n    this.api = api\n\n    /**\n     * Tool's initial config\n     */\n    this.config = {\n      endpoints: config.endpoints || '',\n      additionalRequestData: config.additionalRequestData || {},\n      additionalRequestHeaders: config.additionalRequestHeaders || {},\n      field: config.field || 'image',\n      types: config.types || 'image/*',\n      captionPlaceholder: config.captionPlaceholder || 'Caption',\n      buttonContent: config.buttonContent || '',\n      uploader: config.uploader || undefined\n    }\n\n    /**\n     * Module for file uploading\n     */\n    this.uploader = new Uploader({\n      config: this.config,\n      onUpload: response => this.onUpload(response),\n      onError: error => this.uploadingFailed(error)\n    })\n\n    /**\n     * Module for working with UI\n     */\n    this.ui = new Ui({\n      api,\n      config: this.config,\n      onSelectFile: () => {\n        this.uploader.uploadSelectedFile({\n          onPreview: (src) => {\n            this.ui.showPreloader(src)\n          }\n        })\n      }\n    })\n\n    /**\n     * Module for working with tunes\n     */\n    this.tunes = new Tunes({\n      api,\n      onChange: tuneName => this.tuneToggled(tuneName)\n    })\n\n    /**\n     * Set saved state\n     */\n    this._data = {}\n    this.data = data\n  }\n\n  /**\n   * Renders Block content\n   * @public\n   *\n   * @return {HTMLDivElement}\n   */\n  render() {\n    return this.ui.render(this.data)\n  }\n\n  /**\n   * Return Block data\n   * @public\n   *\n   * @return {ImageToolData}\n   */\n  save() {\n    const caption = this.ui.nodes.caption\n\n    this._data.caption = caption.innerHTML\n\n    return this.data\n  }\n\n  /**\n   * Makes buttons with tunes: add background, add border, stretch image\n   * @public\n   *\n   * @return {Element}\n   */\n  renderSettings() {\n    return this.tunes.render(this.data)\n  }\n\n  /**\n   * Fires after clicks on the Toolbox Image Icon\n   * Initiates click on the Select File button\n   * @public\n   */\n  appendCallback() {\n    this.ui.nodes.fileButton.click()\n  }\n\n  /**\n   * Specify paste substitutes\n   *\n   * @see {@link https://github.com/codex-team/editor.js/blob/master/docs/tools.md#paste-handling}\n   */\n  static get pasteConfig() {\n    return {\n      /**\n       * Paste HTML into Editor\n       */\n      tags: ['img'],\n\n      /**\n       * Paste URL of image into the Editor\n       */\n      patterns: {\n        image: /https?:\\/\\/\\S+\\.(gif|jpe?g|tiff|png)$/i\n      },\n\n      /**\n       * Drag n drop file from into the Editor\n       */\n      files: {\n        mimeTypes: ['image/*']\n      }\n    }\n  }\n\n  /**\n   * Specify paste handlers\n   * @public\n   *\n   * @see {@link https://github.com/codex-team/editor.js/blob/master/docs/tools.md#paste-handling}\n   */\n  async onPaste(event) {\n    switch (event.type) {\n      case 'tag':\n        // eslint-disable-next-line\n        const image = event.detail.data\n\n        /** Images from PDF */\n        if (image.src.startsWith('blob:')) {\n          const response = await fetch(image.src)\n          const file = await response.blob()\n\n          this.uploadFile(file)\n          break\n        }\n\n        this.uploadUrl(image.src)\n        break\n\n      case 'pattern':\n        // eslint-disable-next-line\n        const url = event.detail.data\n\n        this.uploadUrl(url)\n        break\n\n      case 'file':\n        // eslint-disable-next-line\n        const file = event.detail.file\n\n        this.uploadFile(file)\n        break\n    }\n  }\n\n  /**\n   * Private methods\n   * ̿̿ ̿̿ ̿̿ ̿'̿'\\̵͇̿̿\\з= ( ▀ ͜͞ʖ▀) =ε/̵͇̿̿/’̿’̿ ̿ ̿̿ ̿̿ ̿̿\n   */\n\n  /**\n   * Stores all Tool's data\n   * @private\n   *\n   * @param {ImageToolData} data\n   */\n  set data(data) {\n    this.image = data.file\n\n    this._data.caption = data.caption || ''\n    this.ui.fillCaption(this._data.caption)\n\n    Tunes.tunes.forEach(({ name: tune }) => {\n      const value = data[tune] !== undefined ? data[tune] : false\n\n      this.setTune(tune, value)\n    })\n  }\n\n  /**\n   * Return Tool data\n   * @private\n   *\n   * @return {ImageToolData} data\n   */\n  get data() {\n    return this._data\n  }\n\n  /**\n   * Set new image file\n   * @private\n   *\n   * @param {object} file - uploaded file data\n   */\n  set image(file) {\n    this._data.file = file || {}\n\n    if (file && file.url) {\n      this.ui.fillImage(file.url)\n    }\n  }\n\n  /**\n   * File uploading callback\n   * @private\n   *\n   * @param {UploadResponseFormat} response\n   */\n  onUpload(response) {\n    if (response.success && response.file) {\n      this.image = response.file\n    } else {\n      this.uploadingFailed('incorrect response: ' + JSON.stringify(response))\n    }\n  }\n\n  /**\n   * Handle uploader errors\n   * @private\n   *\n   * @param {string} errorText\n   */\n  uploadingFailed(errorText) {\n    // eslint-disable-next-line\n    console.log('Image Tool: uploading failed because of', errorText)\n\n    this.api.notifier.show({\n      message: '图片上传失败，请刷新网页重试',\n      style: 'error'\n    })\n    this.ui.hidePreloader()\n  }\n\n  /**\n   * Callback fired when Block Tune is activated\n   * @private\n   *\n   * @param {string} tuneName - tune that has been clicked\n   */\n  tuneToggled(tuneName) {\n    // inverse tune state\n    this.setTune(tuneName, !this._data[tuneName])\n  }\n\n  /**\n   * Set one tune\n   * @param {string} tuneName - {@link Tunes.tunes}\n   * @param {boolean} value - tune state\n   */\n  setTune(tuneName, value) {\n    this._data[tuneName] = value\n\n    this.ui.applyTune(tuneName, value)\n\n    if (tuneName === 'stretched') {\n      const blockId = this.api.blocks.getCurrentBlockIndex()\n\n      setTimeout(() => {\n        /** Wait until api is ready */\n        this.api.blocks.stretchBlock(blockId, value)\n      }, 0)\n    }\n  }\n\n  /**\n   * Show preloader and upload image file\n   *\n   * @param {File} file\n   */\n  uploadFile(file) {\n    this.uploader.uploadByFile(file, {\n      onPreview: (src) => {\n        this.ui.showPreloader(src)\n      }\n    })\n  }\n\n  /**\n   * Show preloader and upload image by target url\n   *\n   * @param {string} url\n   */\n  uploadUrl(url) {\n    this.ui.showPreloader(url)\n    this.uploader.uploadByUrl(url)\n  }\n\n  validate(savedData) {\n    return !(!savedData.file || !savedData.file.url)\n  }\n}\n"],"mappings":";;;;;;AAAA;AACA;;;;;;;;;;;;;;;;;;;ACDA;;;;;;AAMA;AACA;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AANA;AAWA;;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AAbA;AAeA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AAEA;AAQA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAIA;AACA;AAEA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;;;AAGA;AAEA;AACA;AADA;AAIA;;;;;;;AAMA;AAEA;;;;AAGA;AACA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;;AAIA;AACA;AAEA;;;;;;AAIA;AAEA;;;;AAGA;AACA;AAEA;;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AAjOA;AAmOA;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/PA;AAEA;;;;AAGA;AACA;;;;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;AAGA;AACA;AAEA;AACA;AAEA;AAJA;AAOA;AACA;AAEA;AAJA;AAOA;AACA;AAEA;AAJA;AAOA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;;;;;;;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;;;;;;AAIA;AACA;AAEA;AAEA;AACA;AACA;AA5FA;;;;;;ACLA;AAEA;;;;;;;AAMA;AACA;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AAEA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAEA;AACA;AAEA;AADA;AAKA;AACA;AATA;AAYA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;AAMA;AAAA;AAAA;AACA;;;;AAIA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AArLA;AAuLA;;;;;;AAKA;AACA;AACA;;ACtMA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;AASA;AACA;;;;;;;AAOA;AACA;AACA;AAEA;AAHA;AAKA;AAEA;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;;;;AAGA;AACA;AACA;AACA;AAHA;AAMA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AATA;AAYA;;;;AAGA;AACA;AACA;AAFA;AAKA;;;;AAGA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AAEA;AAEA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AADA;AACA;AAGA;;;AAGA;AACA;AADA;AAhBA;AAoBA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA7BA;AA+BA;AAEA;;;;;AAKA;;;;;;;;AAMA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApUA;;;;A","sourceRoot":""}