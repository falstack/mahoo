{"version":3,"file":"25.js","sources":["webpack:///./components/editor/plugin/link/index.scss","webpack:///./components/editor/plugin/link/index.js"],"sourcesContent":["// Exports\nmodule.exports = {};\n","/**\n * @typedef {object} LinkToolData\n * @description Link Tool's input and output data format\n * @property {string} link — data url\n * @property {metaData} meta — fetched link data\n */\n\n/**\n * @typedef {Object} metaData\n * @description Fetched link meta data\n * @property {string} image - link's meta image\n * @property {string} title - link's meta title\n * @property {string} description - link's description\n */\n\n// eslint-disable-next-line\nimport './index.scss'\nimport 'url-polyfill'\nimport ajax from '@codexteam/ajax'\n\n/**\n * @typedef {object} UploadResponseFormat\n * @description This format expected from backend on link data fetching\n * @property {number} success  - 1 for successful uploading, 0 for failure\n * @property {metaData} meta - Object with link data.\n *\n * Tool may have any data provided by backend, currently are supported by design:\n * title, description, image, url\n */\nexport default class LinkTool {\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @return {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon:\n        '<svg width=\"13\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\">\\n' +\n        '  <path d=\"M8.567 13.629c.728.464 1.581.65 2.41.558l-.873.873A3.722 3.722 0 1 1 4.84 9.794L6.694 7.94a3.722 3.722 0 0 1 5.256-.008L10.484 9.4a5.209 5.209 0 0 1-.017.016 1.625 1.625 0 0 0-2.29.009l-1.854 1.854a1.626 1.626 0 0 0 2.244 2.35zm2.766-7.358a3.722 3.722 0 0 0-2.41-.558l.873-.873a3.722 3.722 0 1 1 5.264 5.266l-1.854 1.854a3.722 3.722 0 0 1-5.256.008L9.416 10.5a5.2 5.2 0 0 1 .017-.016 1.625 1.625 0 0 0 2.29-.009l1.854-1.854a1.626 1.626 0 0 0-2.244-2.35z\" transform=\"translate(-3.667 -2.7)\"/>\\n' +\n        '</svg>',\n      title: '超链接'\n    }\n  }\n\n  /**\n   * Allow to press Enter inside the LinkTool input\n   * @returns {boolean}\n   * @public\n   */\n  static get enableLineBreaks() {\n    return true\n  }\n\n  /**\n   * @param {LinkToolData} data - previously saved data\n   * @param {config} config - user config for Tool\n   * @param {object} api - Editor.js API\n   */\n  constructor({ data, config, api }) {\n    this.api = api\n\n    /**\n     * Tool's initial config\n     */\n    this.config = {\n      endpoint: config.endpoint || ''\n    }\n\n    this.nodes = {\n      wrapper: null,\n      container: null,\n      progress: null,\n      input: null,\n      inputHolder: null,\n      linkContent: null,\n      linkImage: null,\n      linkTitle: null,\n      linkDescription: null,\n      linkText: null\n    }\n\n    this._data = {\n      link: '',\n      meta: {}\n    }\n\n    this.data = data\n  }\n\n  /**\n   * Renders Block content\n   * @public\n   *\n   * @return {HTMLDivElement}\n   */\n  render() {\n    this.nodes.wrapper = this.make('div', this.CSS.baseClass)\n    this.nodes.container = this.make('div', this.CSS.container)\n\n    this.nodes.inputHolder = this.makeInputHolder()\n    this.nodes.linkContent = this.prepareLinkPreview()\n\n    /**\n     * If Tool already has data, render link preview, otherwise insert input\n     */\n    if (Object.keys(this.data.meta).length) {\n      this.nodes.container.appendChild(this.nodes.linkContent)\n      this.showLinkPreview(this.data.meta)\n    } else {\n      this.nodes.container.appendChild(this.nodes.inputHolder)\n    }\n\n    this.nodes.wrapper.appendChild(this.nodes.container)\n\n    return this.nodes.wrapper\n  }\n\n  /**\n   * Return Block data\n   * @public\n   *\n   * @return {LinkToolData}\n   */\n  save() {\n    return this.data\n  }\n\n  /**\n   * Stores all Tool's data\n   * @param {LinkToolData} data\n   */\n  set data(data) {\n    this._data = Object.assign(\n      {},\n      {\n        link: data.link || this._data.link,\n        meta: data.meta || this._data.meta\n      }\n    )\n  }\n\n  /**\n   * Return Tool data\n   * @return {LinkToolData} data\n   */\n  get data() {\n    return this._data\n  }\n\n  /**\n   * @return {object} - Link Tool styles\n   * @constructor\n   */\n  get CSS() {\n    return {\n      baseClass: this.api.styles.block,\n      input: this.api.styles.input,\n\n      /**\n       * Tool's classes\n       */\n      container: 'link-tool',\n      inputEl: 'link-tool__input',\n      inputHolder: 'link-tool__input-holder',\n      inputError: 'link-tool__input-holder--error',\n      linkContent: 'link-tool__content',\n      linkContentRendered: 'link-tool__content--rendered',\n      linkImage: 'link-tool__image',\n      linkTitle: 'link-tool__title',\n      linkDescription: 'link-tool__description',\n      linkText: 'link-tool__anchor',\n      progress: 'link-tool__progress',\n      progressLoading: 'link-tool__progress--loading',\n      progressLoaded: 'link-tool__progress--loaded'\n    }\n  }\n\n  /**\n   * Prepare input holder\n   * @return {HTMLElement} - url input\n   */\n  makeInputHolder() {\n    const inputHolder = this.make('div', this.CSS.inputHolder)\n\n    this.nodes.progress = this.make('label', this.CSS.progress)\n    this.nodes.input = this.make('div', [this.CSS.input, this.CSS.inputEl], {\n      contentEditable: true\n    })\n\n    this.nodes.input.dataset.placeholder = 'Link'\n\n    this.nodes.input.addEventListener('paste', (event) => {\n      this.startFetching(event)\n    })\n\n    this.nodes.input.addEventListener('keydown', (event) => {\n      const [ENTER, A] = [13, 65]\n      const cmdPressed = event.ctrlKey || event.metaKey\n\n      switch (event.keyCode) {\n        case ENTER:\n          event.preventDefault()\n          event.stopPropagation()\n\n          this.startFetching(event)\n          break\n        case A:\n          if (cmdPressed) {\n            this.selectLinkUrl(event)\n          }\n          break\n      }\n    })\n\n    inputHolder.appendChild(this.nodes.progress)\n    inputHolder.appendChild(this.nodes.input)\n\n    return inputHolder\n  }\n\n  /**\n   * Activates link data fetching by url\n   */\n  startFetching(event) {\n    let url = this.nodes.input.textContent\n\n    if (event.type === 'paste') {\n      url = (event.clipboardData || window.clipboardData).getData('text')\n    }\n\n    this.removeErrorStyle()\n    this.fetchLinkData(url)\n  }\n\n  /**\n   * If previous link data fetching failed, remove error styles\n   */\n  removeErrorStyle() {\n    this.nodes.inputHolder.classList.remove(this.CSS.inputError)\n    this.nodes.inputHolder.insertBefore(this.nodes.progress, this.nodes.input)\n  }\n\n  /**\n   * Select LinkTool input content by CMD+A\n   * @param {KeyboardEvent} event\n   */\n  selectLinkUrl(event) {\n    event.preventDefault()\n    event.stopPropagation()\n\n    const selection = window.getSelection()\n    const range = new Range()\n\n    const currentNode = selection.anchorNode.parentNode\n    const currentItem = currentNode.closest(`.${this.CSS.inputHolder}`)\n    const inputElement = currentItem.querySelector(`.${this.CSS.inputEl}`)\n\n    range.selectNodeContents(inputElement)\n\n    selection.removeAllRanges()\n    selection.addRange(range)\n  }\n\n  /**\n   * Prepare link preview holder\n   * @return {HTMLElement}\n   */\n  prepareLinkPreview() {\n    const holder = this.make('a', this.CSS.linkContent, {\n      target: '_blank',\n      rel: 'nofollow noindex noreferrer'\n    })\n\n    this.nodes.linkImage = this.make('div', this.CSS.linkImage)\n    this.nodes.linkTitle = this.make('div', this.CSS.linkTitle)\n    this.nodes.linkDescription = this.make('p', this.CSS.linkDescription)\n    this.nodes.linkText = this.make('span', this.CSS.linkText)\n\n    return holder\n  }\n\n  /**\n   * Compose link preview from fetched data\n   * @param {metaData} meta - link meta data\n   */\n  showLinkPreview({ image, title, description }) {\n    this.nodes.container.appendChild(this.nodes.linkContent)\n\n    if (image && image.url) {\n      this.nodes.linkImage.style.backgroundImage = 'url(' + image.url + ')'\n      this.nodes.linkContent.appendChild(this.nodes.linkImage)\n    }\n\n    if (title) {\n      this.nodes.linkTitle.textContent = title\n      this.nodes.linkContent.appendChild(this.nodes.linkTitle)\n    }\n\n    if (description) {\n      this.nodes.linkDescription.textContent = description\n      this.nodes.linkContent.appendChild(this.nodes.linkDescription)\n    }\n\n    this.nodes.linkContent.classList.add(this.CSS.linkContentRendered)\n    this.nodes.linkContent.setAttribute('href', this.data.link)\n    this.nodes.linkContent.appendChild(this.nodes.linkText)\n\n    try {\n      this.nodes.linkText.textContent = new URL(this.data.link).hostname\n    } catch (e) {\n      this.nodes.linkText.textContent = this.data.link\n    }\n  }\n\n  /**\n   * Show loading progressbar\n   */\n  showProgress() {\n    this.nodes.progress.classList.add(this.CSS.progressLoading)\n  }\n\n  /**\n   * Hide loading progressbar\n   */\n  hideProgress() {\n    return new Promise((resolve) => {\n      this.nodes.progress.classList.remove(this.CSS.progressLoading)\n      this.nodes.progress.classList.add(this.CSS.progressLoaded)\n\n      setTimeout(resolve, 500)\n    })\n  }\n\n  /**\n   * If data fetching failed, set input error style\n   */\n  applyErrorStyle() {\n    this.nodes.inputHolder.classList.add(this.CSS.inputError)\n    this.nodes.progress.remove()\n  }\n\n  /**\n   * Sends to backend pasted url and receives link data\n   * @param {string} url - link source url\n   */\n  async fetchLinkData(url) {\n    if (!url.includes('.')) {\n      return\n    }\n    if (!/^https?:\\/\\//.test(url)) {\n      url = 'https://' + url\n    }\n    try {\n      new URL(url) // eslint-disable-line\n    } catch (e) {\n      return\n    }\n    this.showProgress()\n    this.data = { link: url }\n\n    try {\n      const response = await ajax.get({\n        url: this.config.endpoint,\n        data: {\n          url\n        }\n      })\n\n      this.onFetch(response.body)\n    } catch (error) {\n      this.fetchingFailed('服务暂时不可用')\n    }\n  }\n\n  /**\n   * Link data fetching callback\n   * @param {UploadResponseFormat} response\n   */\n  onFetch(response) {\n    if (!response || !response.success) {\n      this.fetchingFailed('不支持的链接')\n      return\n    }\n\n    const metaData = response.meta\n\n    this.data = { meta: metaData }\n\n    if (!metaData) {\n      this.fetchingFailed('服务暂不可用')\n      return\n    }\n\n    this.hideProgress().then(() => {\n      this.nodes.inputHolder.remove()\n      this.showLinkPreview(metaData)\n    })\n  }\n\n  /**\n   * Handle link fetching errors\n   * @private\n   *\n   * @param {string} errorMessage\n   */\n  fetchingFailed(errorMessage) {\n    this.api.notifier.show({\n      message: errorMessage,\n      style: 'error'\n    })\n\n    this.applyErrorStyle()\n  }\n\n  /**\n   * Helper method for elements creation\n   * @param tagName\n   * @param classNames\n   * @param attributes\n   * @return {HTMLElement}\n   */\n  make(tagName, classNames = null, attributes = {}) {\n    const el = document.createElement(tagName)\n\n    if (Array.isArray(classNames)) {\n      el.classList.add(...classNames)\n    } else if (classNames) {\n      el.classList.add(classNames)\n    }\n\n    for (const attrName in attributes) {\n      el[attrName] = attributes[attrName]\n    }\n\n    return el\n  }\n}\n"],"mappings":";;;;;;AAAA;AACA;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAOA;;;;;;;AAQA;AACA;AACA;AACA;AAEA;;;;;;;;;;AASA;AACA;;;;;;;AAOA;AACA;AACA;AAIA;AALA;AAOA;AAEA;;;;;;;AAKA;AACA;AACA;AAEA;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;;;AAGA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AACA;AAFA;AAKA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AAEA;AACA;AAEA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AAGA;AACA;AAFA;AAKA;AAEA;;;;;;AAIA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AAEA;;;;;;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAXA;AAaA;AAEA;AACA;AAEA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAGA;AACA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAOA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1ZA;;;;;A","sourceRoot":""}