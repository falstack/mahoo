exports.ids=[25],exports.modules={247:function(e,n,r){"use strict";(function(e){const canvas=document.getElementById("canvas");canvas.width=canvas.clientWidth,canvas.height=canvas.clientHeight;let n={SIM_RESOLUTION:128,DYE_RESOLUTION:512,DENSITY_DISSIPATION:.97,VELOCITY_DISSIPATION:.98,PRESSURE_DISSIPATION:.8,PRESSURE_ITERATIONS:20,CURL:30,SPLAT_RADIUS:.5,SHADING:!0,COLORFUL:!0,PAUSED:!1,BACK_COLOR:{r:255,g:255,b:255},TRANSPARENT:!1,BLOOM:!0,BLOOM_ITERATIONS:8,BLOOM_RESOLUTION:256,BLOOM_INTENSITY:.8,BLOOM_THRESHOLD:.6,BLOOM_SOFT_KNEE:.7};function r(){this.id=-1,this.x=0,this.y=0,this.dx=0,this.dy=0,this.down=!1,this.moved=!1,this.color=[30,0,300]}let t=[],o=[],v=[];t.push(new r);const{gl:f,ext:l}=function(canvas){const e={alpha:!0,depth:!1,stencil:!1,antialias:!1,preserveDrawingBuffer:!1};let n=canvas.getContext("webgl2",e);const r=!!n;r||(n=canvas.getContext("webgl",e)||canvas.getContext("experimental-webgl",e));let t,o;r?(n.getExtension("EXT_color_buffer_float"),o=n.getExtension("OES_texture_float_linear")):(t=n.getExtension("OES_texture_half_float"),o=n.getExtension("OES_texture_half_float_linear"));n.clearColor(0,0,0,1);const v=r?n.HALF_FLOAT:t.HALF_FLOAT_OES;let f,l,c;r?(f=m(n,n.RGBA16F,n.RGBA,v),l=m(n,n.RG16F,n.RG,v),c=m(n,n.R16F,n.RED,v)):(f=m(n,n.RGBA,n.RGBA,v),l=m(n,n.RGBA,n.RGBA,v),c=m(n,n.RGBA,n.RGBA,v));return{gl:n,ext:{formatRGBA:f,formatRG:l,formatR:c,halfFloatTexType:v,supportLinearFiltering:o}}}(canvas);function m(e,n,r,t){if(!function(e,n,r,t){let o=e.createTexture();e.bindTexture(e.TEXTURE_2D,o),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,n,4,4,0,r,t,null);let v=e.createFramebuffer();return e.bindFramebuffer(e.FRAMEBUFFER,v),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,o,0),e.checkFramebufferStatus(e.FRAMEBUFFER)==e.FRAMEBUFFER_COMPLETE}(e,n,r,t))switch(n){case e.R16F:return m(e,e.RG16F,e.RG,t);case e.RG16F:return m(e,e.RGBA16F,e.RGBA,t);default:return null}return{internalFormat:n,format:r}}/Mobi|Android/i.test(navigator.userAgent)&&(n.SHADING=!1),l.supportLinearFiltering||(n.SHADING=!1,n.BLOOM=!1);class c{constructor(e,n){if(this.uniforms={},this.program=f.createProgram(),f.attachShader(this.program,e),f.attachShader(this.program,n),f.linkProgram(this.program),!f.getProgramParameter(this.program,f.LINK_STATUS))throw f.getProgramInfoLog(this.program);const r=f.getProgramParameter(this.program,f.ACTIVE_UNIFORMS);for(let i=0;i<r;i++){const e=f.getActiveUniform(this.program,i).name;this.uniforms[e]=f.getUniformLocation(this.program,e)}}bind(){f.useProgram(this.program)}}function h(e,source){const n=f.createShader(e);if(f.shaderSource(n,source),f.compileShader(n),!f.getShaderParameter(n,f.COMPILE_STATUS))throw f.getShaderInfoLog(n);return n}const T=h(f.VERTEX_SHADER,"\n    precision highp float;\n\n    attribute vec2 aPosition;\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform vec2 texelSize;\n\n    void main () {\n        vUv = aPosition * 0.5 + 0.5;\n        vL = vUv - vec2(texelSize.x, 0.0);\n        vR = vUv + vec2(texelSize.x, 0.0);\n        vT = vUv + vec2(0.0, texelSize.y);\n        vB = vUv - vec2(0.0, texelSize.y);\n        gl_Position = vec4(aPosition, 0.0, 1.0);\n    }\n"),d=h(f.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float value;\n\n    void main () {\n        gl_FragColor = value * texture2D(uTexture, vUv);\n    }\n"),E=h(f.FRAGMENT_SHADER,"\n    precision mediump float;\n\n    uniform vec4 color;\n\n    void main () {\n        gl_FragColor = color;\n    }\n"),x=h(f.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float aspectRatio;\n\n    #define SCALE 25.0\n\n    void main () {\n        vec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));\n        float v = mod(uv.x + uv.y, 2.0);\n        v = v * 0.1 + 0.8;\n        gl_FragColor = vec4(vec3(v), 1.0);\n    }\n"),R=h(f.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec3 C = texture2D(uTexture, vUv).rgb;\n        float a = max(C.r, max(C.g, C.b));\n        gl_FragColor = vec4(C, a);\n    }\n"),D=h(f.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform sampler2D uBloom;\n    uniform sampler2D uDithering;\n    uniform vec2 ditherScale;\n\n    void main () {\n        vec3 C = texture2D(uTexture, vUv).rgb;\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\n        vec3 noise = texture2D(uDithering, vUv * ditherScale).rgb;\n        noise = noise * 2.0 - 1.0;\n        bloom += noise / 800.0;\n        bloom = pow(bloom.rgb, vec3(1.0 / 2.2));\n        C += bloom;\n        float a = max(C.r, max(C.g, C.b));\n        gl_FragColor = vec4(C, a);\n    }\n"),_=h(f.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform vec2 texelSize;\n\n    void main () {\n        vec3 L = texture2D(uTexture, vL).rgb;\n        vec3 R = texture2D(uTexture, vR).rgb;\n        vec3 T = texture2D(uTexture, vT).rgb;\n        vec3 B = texture2D(uTexture, vB).rgb;\n        vec3 C = texture2D(uTexture, vUv).rgb;\n\n        float dx = length(R) - length(L);\n        float dy = length(T) - length(B);\n\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n        vec3 l = vec3(0.0, 0.0, 1.0);\n\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n        C.rgb *= diffuse;\n\n        float a = max(C.r, max(C.g, C.b));\n        gl_FragColor = vec4(C, a);\n    }\n"),y=h(f.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform sampler2D uBloom;\n    uniform sampler2D uDithering;\n    uniform vec2 ditherScale;\n    uniform vec2 texelSize;\n\n    void main () {\n        vec3 L = texture2D(uTexture, vL).rgb;\n        vec3 R = texture2D(uTexture, vR).rgb;\n        vec3 T = texture2D(uTexture, vT).rgb;\n        vec3 B = texture2D(uTexture, vB).rgb;\n        vec3 C = texture2D(uTexture, vUv).rgb;\n\n        float dx = length(R) - length(L);\n        float dy = length(T) - length(B);\n\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n        vec3 l = vec3(0.0, 0.0, 1.0);\n\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n        C *= diffuse;\n\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\n        vec3 noise = texture2D(uDithering, vUv * ditherScale).rgb;\n        noise = noise * 2.0 - 1.0;\n        bloom += noise / 800.0;\n        bloom = pow(bloom.rgb, vec3(1.0 / 2.2));\n        C += bloom;\n\n        float a = max(C.r, max(C.g, C.b));\n        gl_FragColor = vec4(C, a);\n    }\n"),A=h(f.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform vec3 curve;\n    uniform float threshold;\n\n    void main () {\n        vec3 c = texture2D(uTexture, vUv).rgb;\n        float br = max(c.r, max(c.g, c.b));\n        float rq = clamp(br - curve.x, 0.0, curve.y);\n        rq = curve.z * rq * rq;\n        c *= max(rq, br - threshold) / max(br, 0.0001);\n        gl_FragColor = vec4(c, 0.0);\n    }\n"),S=h(f.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 sum = vec4(0.0);\n        sum += texture2D(uTexture, vL);\n        sum += texture2D(uTexture, vR);\n        sum += texture2D(uTexture, vT);\n        sum += texture2D(uTexture, vB);\n        sum *= 0.25;\n        gl_FragColor = sum;\n    }\n"),L=h(f.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform float intensity;\n\n    void main () {\n        vec4 sum = vec4(0.0);\n        sum += texture2D(uTexture, vL);\n        sum += texture2D(uTexture, vR);\n        sum += texture2D(uTexture, vT);\n        sum += texture2D(uTexture, vB);\n        sum *= 0.25;\n        gl_FragColor = sum * intensity;\n    }\n"),U=h(f.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTarget;\n    uniform float aspectRatio;\n    uniform vec3 color;\n    uniform vec2 point;\n    uniform float radius;\n\n    void main () {\n        vec2 p = vUv - point.xy;\n        p.x *= aspectRatio;\n        vec3 splat = exp(-dot(p, p) / radius) * color;\n        vec3 base = texture2D(uTarget, vUv).xyz;\n        gl_FragColor = vec4(base + splat, 1.0);\n    }\n"),F=h(f.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uSource;\n    uniform vec2 texelSize;\n    uniform vec2 dyeTexelSize;\n    uniform float dt;\n    uniform float dissipation;\n\n    vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\n        vec2 st = uv / tsize - 0.5;\n\n        vec2 iuv = floor(st);\n        vec2 fuv = fract(st);\n\n        vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\n        vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\n        vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\n        vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\n\n        return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\n    }\n\n    void main () {\n        vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\n        gl_FragColor = dissipation * bilerp(uSource, coord, dyeTexelSize);\n        gl_FragColor.a = 1.0;\n    }\n"),w=h(f.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uSource;\n    uniform vec2 texelSize;\n    uniform float dt;\n    uniform float dissipation;\n\n    void main () {\n        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n        gl_FragColor = dissipation * texture2D(uSource, coord);\n        gl_FragColor.a = 1.0;\n    }\n"),B=h(f.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).x;\n        float R = texture2D(uVelocity, vR).x;\n        float T = texture2D(uVelocity, vT).y;\n        float B = texture2D(uVelocity, vB).y;\n\n        vec2 C = texture2D(uVelocity, vUv).xy;\n        if (vL.x < 0.0) { L = -C.x; }\n        if (vR.x > 1.0) { R = -C.x; }\n        if (vT.y > 1.0) { T = -C.y; }\n        if (vB.y < 0.0) { B = -C.y; }\n\n        float div = 0.5 * (R - L + T - B);\n        gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n    }\n"),O=h(f.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).y;\n        float R = texture2D(uVelocity, vR).y;\n        float T = texture2D(uVelocity, vT).x;\n        float B = texture2D(uVelocity, vB).x;\n        float vorticity = R - L - T + B;\n        gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\n    }\n"),N=h(f.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uCurl;\n    uniform float curl;\n    uniform float dt;\n\n    void main () {\n        float L = texture2D(uCurl, vL).x;\n        float R = texture2D(uCurl, vR).x;\n        float T = texture2D(uCurl, vT).x;\n        float B = texture2D(uCurl, vB).x;\n        float C = texture2D(uCurl, vUv).x;\n\n        vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\n        force /= length(force) + 0.0001;\n        force *= curl * C;\n        force.y *= -1.0;\n\n        vec2 vel = texture2D(uVelocity, vUv).xy;\n        gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\n    }\n"),C=h(f.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uDivergence;\n\n    vec2 boundary (vec2 uv) {\n        return uv;\n        // uncomment if you use wrap or repeat texture mode\n        // uv = min(max(uv, 0.0), 1.0);\n        // return uv;\n    }\n\n    void main () {\n        float L = texture2D(uPressure, boundary(vL)).x;\n        float R = texture2D(uPressure, boundary(vR)).x;\n        float T = texture2D(uPressure, boundary(vT)).x;\n        float B = texture2D(uPressure, boundary(vB)).x;\n        float C = texture2D(uPressure, vUv).x;\n        float divergence = texture2D(uDivergence, vUv).x;\n        float pressure = (L + R + B + T - divergence) * 0.25;\n        gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n    }\n"),I=h(f.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uVelocity;\n\n    vec2 boundary (vec2 uv) {\n        return uv;\n        // uv = min(max(uv, 0.0), 1.0);\n        // return uv;\n    }\n\n    void main () {\n        float L = texture2D(uPressure, boundary(vL)).x;\n        float R = texture2D(uPressure, boundary(vR)).x;\n        float T = texture2D(uPressure, boundary(vT)).x;\n        float B = texture2D(uPressure, boundary(vB)).x;\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\n        velocity.xy -= vec2(R - L, T - B);\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\n    }\n"),M=(f.bindBuffer(f.ARRAY_BUFFER,f.createBuffer()),f.bufferData(f.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),f.STATIC_DRAW),f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,f.createBuffer()),f.bufferData(f.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,0,2,3]),f.STATIC_DRAW),f.vertexAttribPointer(0,2,f.FLOAT,!1,0,0),f.enableVertexAttribArray(0),e=>{f.bindFramebuffer(f.FRAMEBUFFER,e),f.drawElements(f.TRIANGLES,6,f.UNSIGNED_SHORT,0)});let P,G,X,H,z,V,Y,W,k,K,j=function(){let e=f.createTexture();f.bindTexture(f.TEXTURE_2D,e),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MIN_FILTER,f.LINEAR),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MAG_FILTER,f.LINEAR),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_WRAP_S,f.REPEAT),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_WRAP_T,f.REPEAT),f.texImage2D(f.TEXTURE_2D,0,f.RGB,1,1,0,f.RGB,f.UNSIGNED_BYTE,new Uint8Array([255,255,255]));let n={texture:e,width:1,height:1,attach:n=>(f.activeTexture(f.TEXTURE0+n),f.bindTexture(f.TEXTURE_2D,e),n)},image=new Image;return image.onload=()=>{n.width=image.width,n.height=image.height,f.bindTexture(f.TEXTURE_2D,e),f.texImage2D(f.TEXTURE_2D,0,f.RGB,f.RGB,f.UNSIGNED_BYTE,image)},image.src="https://file.calibur.tv/LDR_RGB1_0.png",image.crossOrigin="Anonymous",n}();const J=new c(T,d),Q=new c(T,E),Z=new c(T,x),$=new c(T,R),ee=new c(T,D),ne=new c(T,_),re=new c(T,y),te=new c(T,A),ie=new c(T,S),oe=new c(T,L),ue=new c(T,U),ae=new c(T,l.supportLinearFiltering?w:F),ve=new c(T,B),fe=new c(T,O),le=new c(T,N),me=new c(T,C),ce=new c(T,I);function se(){let e=De(n.SIM_RESOLUTION),r=De(n.DYE_RESOLUTION);P=e.width,G=e.height,X=r.width,H=r.height;const t=l.halfFloatTexType,o=l.formatRGBA,m=l.formatRG,c=l.formatR,h=l.supportLinearFiltering?f.LINEAR:f.NEAREST;z=null==z?he(X,H,o.internalFormat,o.format,t,h):Te(z,X,H,o.internalFormat,o.format,t,h),V=null==V?he(P,G,m.internalFormat,m.format,t,h):Te(V,P,G,m.internalFormat,m.format,t,h),Y=ge(P,G,c.internalFormat,c.format,t,f.NEAREST),W=ge(P,G,c.internalFormat,c.format,t,f.NEAREST),k=he(P,G,c.internalFormat,c.format,t,f.NEAREST),function(){let e=De(n.BLOOM_RESOLUTION);const r=l.halfFloatTexType,t=l.formatRGBA,o=l.supportLinearFiltering?f.LINEAR:f.NEAREST;K=ge(e.width,e.height,t.internalFormat,t.format,r,o),v.length=0;for(let i=0;i<n.BLOOM_ITERATIONS;i++){let n=e.width>>i+1,f=e.height>>i+1;if(n<2||f<2)break;let l=ge(n,f,t.internalFormat,t.format,r,o);v.push(l)}}()}function ge(e,n,r,t,o,param){f.activeTexture(f.TEXTURE0);let v=f.createTexture();f.bindTexture(f.TEXTURE_2D,v),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MIN_FILTER,param),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MAG_FILTER,param),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_WRAP_S,f.CLAMP_TO_EDGE),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_WRAP_T,f.CLAMP_TO_EDGE),f.texImage2D(f.TEXTURE_2D,0,r,e,n,0,t,o,null);let l=f.createFramebuffer();return f.bindFramebuffer(f.FRAMEBUFFER,l),f.framebufferTexture2D(f.FRAMEBUFFER,f.COLOR_ATTACHMENT0,f.TEXTURE_2D,v,0),f.viewport(0,0,e,n),f.clear(f.COLOR_BUFFER_BIT),{texture:v,fbo:l,width:e,height:n,attach:e=>(f.activeTexture(f.TEXTURE0+e),f.bindTexture(f.TEXTURE_2D,v),e)}}function he(e,n,r,t,o,param){let v=ge(e,n,r,t,o,param),f=ge(e,n,r,t,o,param);return{get read(){return v},set read(e){v=e},get write(){return f},set write(e){f=e},swap(){let e=v;v=f,f=e}}}function Te(e,n,r,t,o,v,param){return e.read=function(e,n,r,t,o,v,param){let l=ge(n,r,t,o,v,param);return J.bind(),f.uniform1i(J.uniforms.uTexture,e.attach(0)),f.uniform1f(J.uniforms.value,1),M(l.fbo),l}(e.read,n,r,t,o,v,param),e.write=ge(n,r,t,o,v,param),e}se(),Re(parseInt(20*Math.random())+5);let de=Date.now();function Ee(e){n.BLOOM&&function(source,e){if(v.length<2)return;let r=e;f.disable(f.BLEND),te.bind();let t=n.BLOOM_THRESHOLD*n.BLOOM_SOFT_KNEE+1e-4,o=n.BLOOM_THRESHOLD-t,l=2*t,m=.25/t;f.uniform3f(te.uniforms.curve,o,l,m),f.uniform1f(te.uniforms.threshold,n.BLOOM_THRESHOLD),f.uniform1i(te.uniforms.uTexture,source.attach(0)),f.viewport(0,0,r.width,r.height),M(r.fbo),ie.bind();for(let i=0;i<v.length;i++){let e=v[i];f.uniform2f(ie.uniforms.texelSize,1/r.width,1/r.height),f.uniform1i(ie.uniforms.uTexture,r.attach(0)),f.viewport(0,0,e.width,e.height),M(e.fbo),r=e}f.blendFunc(f.ONE,f.ONE),f.enable(f.BLEND);for(let i=v.length-2;i>=0;i--){let e=v[i];f.uniform2f(ie.uniforms.texelSize,1/r.width,1/r.height),f.uniform1i(ie.uniforms.uTexture,r.attach(0)),f.viewport(0,0,e.width,e.height),M(e.fbo),r=e}f.disable(f.BLEND),oe.bind(),f.uniform2f(oe.uniforms.texelSize,1/r.width,1/r.height),f.uniform1i(oe.uniforms.uTexture,r.attach(0)),f.uniform1f(oe.uniforms.intensity,n.BLOOM_INTENSITY),f.viewport(0,0,e.width,e.height),M(e.fbo)}(z.read,K),null!=e&&n.TRANSPARENT?f.disable(f.BLEND):(f.blendFunc(f.ONE,f.ONE_MINUS_SRC_ALPHA),f.enable(f.BLEND));let r=null==e?f.drawingBufferWidth:X,t=null==e?f.drawingBufferHeight:H;if(f.viewport(0,0,r,t),!n.TRANSPARENT){Q.bind();let r=n.BACK_COLOR;f.uniform4f(Q.uniforms.color,r.r/255,r.g/255,r.b/255,1),M(e)}if(null==e&&n.TRANSPARENT&&(Z.bind(),f.uniform1f(Z.uniforms.aspectRatio,canvas.width/canvas.height),M(null)),n.SHADING){let e=n.BLOOM?re:ne;if(e.bind(),f.uniform2f(e.uniforms.texelSize,1/r,1/t),f.uniform1i(e.uniforms.uTexture,z.read.attach(0)),n.BLOOM){f.uniform1i(e.uniforms.uBloom,K.attach(1)),f.uniform1i(e.uniforms.uDithering,j.attach(2));let n=_e(j,r,t);f.uniform2f(e.uniforms.ditherScale,n.x,n.y)}}else{let e=n.BLOOM?ee:$;if(e.bind(),f.uniform1i(e.uniforms.uTexture,z.read.attach(0)),n.BLOOM){f.uniform1i(e.uniforms.uBloom,K.attach(1)),f.uniform1i(e.uniforms.uDithering,j.attach(2));let n=_e(j,r,t);f.uniform2f(e.uniforms.ditherScale,n.x,n.y)}}M(e)}function xe(e,r,t,o,v){f.viewport(0,0,P,G),ue.bind(),f.uniform1i(ue.uniforms.uTarget,V.read.attach(0)),f.uniform1f(ue.uniforms.aspectRatio,canvas.width/canvas.height),f.uniform2f(ue.uniforms.point,e/canvas.width,1-r/canvas.height),f.uniform3f(ue.uniforms.color,t,-o,1),f.uniform1f(ue.uniforms.radius,n.SPLAT_RADIUS/100),M(V.write.fbo),V.swap(),f.viewport(0,0,X,H),f.uniform1i(ue.uniforms.uTarget,z.read.attach(0)),f.uniform3f(ue.uniforms.color,v.r,v.g,v.b),M(z.write.fbo),z.swap()}function Re(e){for(let i=0;i<e;i++){const e=pe();e.r*=10,e.g*=10,e.b*=10,xe(canvas.width*Math.random(),canvas.height*Math.random(),1e3*(Math.random()-.5),1e3*(Math.random()-.5),e)}}function pe(){let e=function(e,s,n){let r,g,b,i,t,p,q,o;switch(i=Math.floor(6*e),t=6*e-i,p=n*(1-s),q=n*(1-t*s),o=n*(1-(1-t)*s),i%6){case 0:r=n,g=o,b=p;break;case 1:r=q,g=n,b=p;break;case 2:r=p,g=n,b=o;break;case 3:r=p,g=q,b=n;break;case 4:r=o,g=p,b=n;break;case 5:r=n,g=p,b=q}return{r:r,g:g,b:b}}(Math.random(),1,1);return e.r*=.15,e.g*=.15,e.b*=.15,e}function De(e){let n=f.drawingBufferWidth/f.drawingBufferHeight;n<1&&(n=1/n);let r=Math.round(e*n),t=Math.round(e);return f.drawingBufferWidth>f.drawingBufferHeight?{width:r,height:t}:{width:t,height:r}}function _e(e,n,r){return{x:n/e.width,y:r/e.height}}!function e(){canvas.width==canvas.clientWidth&&canvas.height==canvas.clientHeight||(canvas.width=canvas.clientWidth,canvas.height=canvas.clientHeight,se()),function(){o.length>0&&Re(o.pop());for(let i=0;i<t.length;i++){const p=t[i];p.moved&&(xe(p.x,p.y,p.dx,p.dy,p.color),p.moved=!1)}if(!n.COLORFUL)return;if(de+100<Date.now()){de=Date.now();for(let i=0;i<t.length;i++){t[i].color=pe()}}}(),n.PAUSED||function(dt){f.disable(f.BLEND),f.viewport(0,0,P,G),fe.bind(),f.uniform2f(fe.uniforms.texelSize,1/P,1/G),f.uniform1i(fe.uniforms.uVelocity,V.read.attach(0)),M(W.fbo),le.bind(),f.uniform2f(le.uniforms.texelSize,1/P,1/G),f.uniform1i(le.uniforms.uVelocity,V.read.attach(0)),f.uniform1i(le.uniforms.uCurl,W.attach(1)),f.uniform1f(le.uniforms.curl,n.CURL),f.uniform1f(le.uniforms.dt,dt),M(V.write.fbo),V.swap(),ve.bind(),f.uniform2f(ve.uniforms.texelSize,1/P,1/G),f.uniform1i(ve.uniforms.uVelocity,V.read.attach(0)),M(Y.fbo),J.bind(),f.uniform1i(J.uniforms.uTexture,k.read.attach(0)),f.uniform1f(J.uniforms.value,n.PRESSURE_DISSIPATION),M(k.write.fbo),k.swap(),me.bind(),f.uniform2f(me.uniforms.texelSize,1/P,1/G),f.uniform1i(me.uniforms.uDivergence,Y.attach(0));for(let i=0;i<n.PRESSURE_ITERATIONS;i++)f.uniform1i(me.uniforms.uPressure,k.read.attach(1)),M(k.write.fbo),k.swap();ce.bind(),f.uniform2f(ce.uniforms.texelSize,1/P,1/G),f.uniform1i(ce.uniforms.uPressure,k.read.attach(0)),f.uniform1i(ce.uniforms.uVelocity,V.read.attach(1)),M(V.write.fbo),V.swap(),ae.bind(),f.uniform2f(ae.uniforms.texelSize,1/P,1/G),l.supportLinearFiltering||f.uniform2f(ae.uniforms.dyeTexelSize,1/P,1/G);let e=V.read.attach(0);f.uniform1i(ae.uniforms.uVelocity,e),f.uniform1i(ae.uniforms.uSource,e),f.uniform1f(ae.uniforms.dt,dt),f.uniform1f(ae.uniforms.dissipation,n.VELOCITY_DISSIPATION),M(V.write.fbo),V.swap(),f.viewport(0,0,X,H),l.supportLinearFiltering||f.uniform2f(ae.uniforms.dyeTexelSize,1/X,1/H);f.uniform1i(ae.uniforms.uVelocity,V.read.attach(0)),f.uniform1i(ae.uniforms.uSource,z.read.attach(1)),f.uniform1f(ae.uniforms.dissipation,n.DENSITY_DISSIPATION),M(z.write.fbo),z.swap()}(.016);Ee(null),requestAnimationFrame(e)}(),canvas.addEventListener("mousemove",e=>{t[0].moved=t[0].down,t[0].dx=5*(e.offsetX-t[0].x),t[0].dy=5*(e.offsetY-t[0].y),t[0].x=e.offsetX,t[0].y=e.offsetY}),canvas.addEventListener("touchmove",e=>{e.preventDefault();const n=e.targetTouches;for(let i=0;i<n.length;i++){let e=t[i];e.moved=e.down,e.dx=8*(n[i].pageX-e.x),e.dy=8*(n[i].pageY-e.y),e.x=n[i].pageX,e.y=n[i].pageY}},!1),canvas.addEventListener("mousedown",()=>{t[0].down=!0,t[0].color=pe()}),canvas.addEventListener("touchstart",e=>{e.preventDefault();const n=e.targetTouches;for(let i=0;i<n.length;i++)i>=t.length&&t.push(new r),t[i].id=n[i].identifier,t[i].down=!0,t[i].x=n[i].pageX,t[i].y=n[i].pageY,t[i].color=pe()}),window.addEventListener("mouseup",()=>{t[0].down=!1}),window.addEventListener("touchend",e=>{const n=e.changedTouches;for(let i=0;i<n.length;i++)for(let e=0;e<t.length;e++)n[i].identifier==t[e].id&&(t[e].down=!1)}),window.addEventListener("keydown",e=>{"KeyP"===e.code&&(n.PAUSED=!n.PAUSED)," "===e.key&&o.push(parseInt(20*Math.random())+5)})}).call(this,r(69).URL)}};